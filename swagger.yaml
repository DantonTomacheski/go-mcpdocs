openapi: 3.0.0
info:
  title: GitHub Documentation Extraction API
  description: API for extracting and processing documentation from GitHub repositories
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: /
    description: Default server

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Check if the API is running
      operationId: healthCheck
      tags:
        - Health
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: UP
                  message:
                    type: string
                    example: API is running

  /api/v1/repos/{owner}/{repo}:
    get:
      summary: Get repository information
      description: Fetch information about a GitHub repository and optionally its documentation
      operationId: getRepository
      tags:
        - Repositories
      parameters:
        - name: owner
          in: path
          required: true
          description: Repository owner/organization
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: Repository name
          schema:
            type: string
        - name: skip_docs
          in: query
          required: false
          description: Skip fetching documentation
          schema:
            type: boolean
            default: false
        - name: force_refresh
          in: query
          required: false
          description: Force refresh the repository data
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Repository information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/search/repos:
    get:
      summary: Search repositories
      description: Search for GitHub repositories with documentation
      operationId: searchRepositories
      tags:
        - Repositories
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: per_page
          in: query
          required: false
          description: Number of results per page
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Invalid request (e.g., missing fields, user already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: Log in a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Invalid request (e.g., missing fields)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      summary: Refresh an access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Invalid request (e.g., missing refresh token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/docs/repos/{owner}/{repo}:
    get:
      summary: Get repository documentation (Protected)
      description: Fetch documentation files from a GitHub repository. Requires authentication.
      operationId: getRepositoryDocumentationProtected
      tags:
        - Documentation
      security:
        - bearerAuth: []
      parameters:
        - name: owner
          in: path
          required: true
          description: Repository owner/organization
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: Repository name
          schema:
            type: string
        - name: tag
          in: query
          required: false
          description: Repository tag or reference to fetch documentation from
          schema:
            type: string
      responses:
        '200':
          description: Documentation retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDocsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (Invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Token valid, but insufficient permissions - if applicable)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Repository or documentation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/docs/raw:
    get:
      summary: Get raw documentation files (Protected)
      description: Fetch raw documentation files directly using a GitHub repository URL. Requires authentication.
      operationId: getRawDocsFromURLProtected
      tags:
        - Documentation
      security:
        - bearerAuth: []
      parameters:
        - name: repo
          in: query
          required: true
          description: GitHub repository URL
          schema:
            type: string
        - name: ref
          in: query
          required: false
          description: Repository tag or reference to fetch documentation from
          schema:
            type: string
      responses:
        '200':
          description: Documentation retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (Invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Token valid, but insufficient permissions - if applicable)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/docs:
    get:
      summary: Get raw documentation files (Legacy endpoint - Protected)
      description: Legacy endpoint that redirects to /api/v1/docs/raw. Requires authentication.
      deprecated: true
      operationId: getLegacyDocsFromURLProtected
      tags:
        - Documentation
      security:
        - bearerAuth: []
      parameters:
        - name: repo
          in: query
          required: true
          description: GitHub repository URL
          schema:
            type: string
        - name: ref
          in: query
          required: false
          description: Repository tag or reference to fetch documentation from
          schema:
            type: string
      responses:
        '200':
          description: Documentation retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (Invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Token valid, but insufficient permissions - if applicable)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/docs/snippets:
    get:
      summary: Get code snippets from documentation (Protected)
      description: Fetch code snippets from documentation files using a GitHub repository URL. Requires authentication.
      operationId: getCodeSnippetsFromURLProtected
      tags:
        - Documentation
      security:
        - bearerAuth: []
      parameters:
        - name: repo
          in: query
          required: true
          description: GitHub repository URL
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: Maximum number of snippets to return
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: ref
          in: query
          required: false
          description: Repository tag or reference to fetch documentation from
          schema:
            type: string
        - name: format
          in: query
          required: false
          description: Response format (json or enhanced text)
          schema:
            type: string
            enum: [json, enhanced]
            default: json
        - name: output
          in: query
          required: false
          description: Output destination (response or file)
          schema:
            type: string
            enum: [response, file]
            default: response
      responses:
        '200':
          description: Code snippets retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            text/plain:
              schema:
                type: string
                description: Formatted text when format=enhanced
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (Invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Token valid, but insufficient permissions - if applicable)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/snippets:
    get:
      summary: Get code snippets from documentation (Legacy endpoint - Protected)
      description: Legacy endpoint that redirects to /api/v1/docs/snippets. Requires authentication.
      deprecated: true
      operationId: getLegacyCodeSnippetsFromURLProtected
      tags:
        - Documentation
      security:
        - bearerAuth: []
      parameters:
        - name: repo
          in: query
          required: true
          description: GitHub repository URL
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: Maximum number of snippets to return
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: ref
          in: query
          required: false
          description: Repository tag or reference to fetch documentation from
          schema:
            type: string
        - name: format
          in: query
          required: false
          description: Response format (json or enhanced text)
          schema:
            type: string
            enum: [json, enhanced]
            default: json
        - name: output
          in: query
          required: false
          description: Output destination (response or file)
          schema:
            type: string
            enum: [response, file]
            default: response
      responses:
        '200':
          description: Code snippets retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
            text/plain:
              schema:
                type: string
                description: Formatted text when format=enhanced
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (Invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (Token valid, but insufficient permissions - if applicable)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/repositories:
    get:
      summary: Semantic query for repositories
      description: |
        Allows querying for a specific repository using the 'repository' parameter (e.g., 'owner/name') 
        or listing/searching all repositories with pagination and sorting. 
        If 'repository' is provided, other general search parameters are ignored. 
        If 'repository' is not provided, general search parameters like 'q' can be used.
      operationId: queryRepositories
      tags:
        - Repositories
      parameters:
        - name: repository
          in: query
          required: false
          description: Specific repository in "owner/repo" format.
          schema:
            type: string
        - name: q
          in: query
          required: false
          description: General search query term (used if 'repository' parameter is not provided).
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: Page number for listing/searching repositories.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: per_page
          in: query
          required: false
          description: Number of results per page when listing/searching.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100 # As per handler logic
        - name: sort_by
          in: query
          required: false
          description: Field to sort by when listing/searching (e.g., stars, forks, updated, name).
          schema:
            type: string
            default: "stars"
            enum: ["stars", "forks", "updated", "name", "created", "pushed"]
        - name: sort_order
          in: query
          required: false
          description: Sort order for listing/searching.
          schema:
            type: string
            default: "desc"
            enum: ["asc", "desc"]
      responses:
        '200':
          description: Successfully retrieved repository information or search results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryQueryResponse'
        '400':
          description: Bad Request (e.g., invalid 'repository' format, invalid pagination parameters).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found (e.g., specific repository not found when 'repository' parameter is used).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Repository:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: GitHub repository ID
        name:
          type: string
          description: Repository name
        full_name:
          type: string
          description: Full repository name (owner/repo)
        description:
          type: string
          description: Repository description
        stars:
          type: integer
          description: Number of stars
        forks:
          type: integer
          description: Number of forks
        language:
          type: string
          description: Primary programming language
        topics:
          type: array
          items:
            type: string
          description: Repository topics/tags
        default_branch:
          type: string
          description: Default branch name
        created_at:
          type: string
          format: date-time
          description: Repository creation date
        updated_at:
          type: string
          format: date-time
          description: Repository last update date
        url:
          type: string
          description: API URL for the repository
        html_url:
          type: string
          description: Web URL for the repository
        documentation_url:
          type: string
          description: URL for documentation if available

    RepositoryDetails:
      type: object
      description: Detailed information about a repository for semantic queries.
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        full_name:
          type: string
        description:
          type: string
        stars:
          type: integer
        forks:
          type: integer
        language:
          type: string
        topics:
          type: array
          items:
            type: string
        default_branch:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        url:
          type: string
          description: API URL for the repository
        html_url:
          type: string
          description: Web URL for the repository
        documentation_status:
          type: string # e.g., "available", "not_found", "processing_error"
          description: Status of documentation processing for this repository.
        documentation_url:
          type: string
          description: Direct URL to fetched documentation if available and processed.
        readme_url:
          type: string
          description: URL to the repository's README file.
        license:
          type: object # Or string if just the license name
          properties:
            name:
              type: string
            spdx_id:
              type: string
            url:
              type: string
          description: Repository license information.

    Documentation:
      type: object
      properties:
        repo_id:
          type: integer
          format: int64
          description: GitHub repository ID
        repo_name:
          type: string
          description: Repository name
        path:
          type: string
          description: Path to the documentation file
        content:
          type: string
          description: Content of the documentation file
        content_type:
          type: string
          description: Content type of the file
        size:
          type: integer
          description: Size of the file in bytes
        sha:
          type: string
          description: SHA hash of the file
        url:
          type: string
          description: URL to access the file

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error code
        message:
          type: string
          description: Error message
        status:
          type: integer
          description: HTTP status code

    SuccessResponse:
      type: object
      properties:
        status:
          type: integer
          description: HTTP status code
        message:
          type: string
          description: Success message
        data:
          type: object
          description: Response data

    RepositoryDocsResponse:
      type: object
      properties:
        status:
          type: integer
          description: HTTP status code
        message:
          type: string
          description: Success message
        repository_owner:
          type: string
          description: Repository owner
        repository_name:
          type: string
          description: Repository name
        repository_ref:
          type: string
          description: Repository tag or reference used
        processed_files_count:
          type: integer
          description: Number of documentation files processed
        documentation_items:
          type: array
          items:
            $ref: '#/components/schemas/Documentation'
          description: List of documentation items

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: testuser
        password:
          type: string
          example: password123

    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: newuser
        email:
          type: string
          format: email
          example: newuser@example.com
        password:
          type: string
          example: newpassword123
        role:
          type: string
          example: user # Default role, could be omitted
          default: user

    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        expires_in:
          type: integer
          format: int64
          description: Access token validity in seconds

    PaginationInfo:
      type: object
      properties:
        current_page:
          type: integer
        per_page:
          type: integer
        next_page:
          type: integer
          nullable: true
        total_items:
          type: integer
          nullable: true # May not always be available from GitHub search
        total_pages:
          type: integer
          nullable: true

    ResponseMeta:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        from_cache:
          type: boolean
        query_params:
          type: object
          additionalProperties: true
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        message:
          type: string
          nullable: true

    RepositoryQueryResponseData:
      type: object
      description: Data payload for repository query, can be a single repo or a list.
      properties:
        repository:
          $ref: '#/components/schemas/RepositoryDetails'
          nullable: true
        repositories:
          type: array
          items:
            $ref: '#/components/schemas/RepositoryDetails'
          nullable: true

    RepositoryQueryResponse:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/ResponseMeta'
        data:
          $ref: '#/components/schemas/RepositoryQueryResponseData'
