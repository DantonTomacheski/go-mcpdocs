{
  "entities": [
    {
      "name": "go-mcpdocsProject",
      "entityType": "project",
      "observations": [
        "Projeto go-mcpdocs: API de alta performance em Go para extração e fornecimento de documentação de repositórios GitHub.",
        "Utiliza Gin, worker pools, integração com GitHub API, configuração via ambiente e shutdown gracioso.",
        "Foco em fornecer contexto atualizado e confiável para LLMs e desenvolvedores.",
        "Possui endpoints RESTful, processadores de documentação, e mecanismos de segurança e performance em evolução.",
        "Entidade detalhada: Representa o núcleo do sistema go-mcpdocs, integrando componentes técnicos, objetivos de negócio e evolução contínua.",
        "Relaciona-se com status, planejamento e objetivos do projeto para garantir alinhamento estratégico e operacional.",
        "Objetivos principais incluem: fornecer contexto confiável, apoiar desenvolvedores, garantir alta performance, e oferecer flexibilidade e escalabilidade."
      ]
    },
    {
      "name": "go-mcpdocsNextSteps2025",
      "entityType": "next_steps_plan",
      "observations": [
        "1. Autenticação e Segurança: Implementar JWT/OAuth, rate limiting.",
        "2. Cache e Performance: Integrar cache (memória/Redis), otimizar pool de workers.",
        "3. Expansão dos Processadores: Suportar múltiplos formatos, converter Markdown para HTML, enriquecer exemplos de código.",
        "4. API e Integração: Novos endpoints REST, documentação Swagger/OpenAPI.",
        "5. Resiliência e Observabilidade: Logging estruturado, métricas, testes de integração/carga.",
        "6. User Experience: Exemplos de uso, respostas formatadas, health check detalhado, endpoint de feedback.",
        "7. Preparação para Escalabilidade: Deploy multi-região, filas para processamento assíncrono.",
        "Esses passos alinham o projeto ao objetivo de ser uma fonte robusta, segura e atualizada de documentação e exemplos para LLMs e desenvolvedores.",
        "Este plano deve ser revisado a cada ciclo de planejamento para garantir alinhamento com as necessidades dos usuários e avanços tecnológicos em LLMs.",
        "Prioridade inicial: autenticação e cache, pois são críticos para segurança e performance.",
        "O sucesso do projeto será medido pela adoção por desenvolvedores e pela redução de respostas desatualizadas/hallucinadas em LLMs.",
        "Entidade detalhada: Plano estratégico do projeto go-mcpdocs para 2025, contendo prioridades, critérios de sucesso e alinhamento com objetivos do projeto."
      ]
    },
    {
      "name": "aonde-estamos.md",
      "entityType": "documentation_status",
      "observations": [
        "Arquivo de status do projeto contendo resumo do progresso, funcionalidades implementadas, etapas do fluxo do sistema e próximos passos.",
        "Atualizado periodicamente para refletir o estado real do projeto go-mcpdocs.",
        "Serve como referência para onboarding, planejamento e acompanhamento de evolução do projeto.",
        "Inclui seção 'Fluxo do Sistema em 9 Etapas' para detalhar o funcionamento do backend.",
        "É o principal ponto de referência para entender rapidamente o estágio e as prioridades do projeto.",
        "Deve ser mantido sincronizado com a evolução das funcionalidades e decisões estratégicas.",
        "Entidade detalhada: Documento vivo de status do projeto, central para onboarding, acompanhamento e planejamento contínuo."
      ]
    },
    {
      "name": "config.Config",
      "entityType": "estrutura",
      "observations": [
        "Estrutura responsável por manter a configuração da aplicação",
        "Armazena GitHubToken, Port, WorkerPoolSize, RequestTimeout, RedisURI, EnableCache e CacheTTL",
        "Usado pelo servidor principal para configurar comportamentos da API e serviços",
        "Carregado a partir de variáveis de ambiente ou arquivo .env",
        "Inclui valores padrão para parâmetros não especificados nas variáveis de ambiente",
        "Suporta configuração de caching com Redis via Upstash para melhorar performance",
        "Configuração de TTL ajustável para controlar o tempo de vida dos itens em cache",
        "Novas configurações adicionadas para Redis: REDIS_URI conecta à instância Upstash Redis",
        "Configuração de cache unificada que suporta múltiplas implementações através da interface comum"
      ]
    },
    {
      "name": "config.Load",
      "entityType": "função",
      "observations": [
        "Função responsável por carregar a configuração da aplicação a partir de variáveis de ambiente",
        "Utiliza o pacote godotenv para carregar variáveis de um arquivo .env se existir",
        "Valida a presença obrigatória do token do GitHub",
        "Define valores padrão para porta (8080), tamanho do pool de workers (5) e timeout de requisições (30s)",
        "Retorna um ponteiro para uma estrutura Config preenchida ou um erro se a configuração for inválida",
        "Realiza validações para garantir valores positivos para parâmetros numéricos"
      ]
    },
    {
      "name": "api.Handler",
      "entityType": "estrutura",
      "observations": [
        "Estrutura central que gerencia os endpoints da API REST",
        "Possui dependência do cliente GitHub para acessar repositórios e documentação",
        "Configura o tamanho do pool de workers para processamento paralelo",
        "Implementa endpoints para buscar repositórios, documentação e realizar buscas",
        "Gerencia erros e retorna códigos HTTP apropriados para diferentes situações",
        "Fornece endpoint de health check para monitoramento da API",
        "Manipula paginação nos resultados de busca de repositórios",
        "Utiliza cancelamento de contexto para interromper operações quando o cliente desconecta"
      ]
    },
    {
      "name": "api.NewHandler",
      "entityType": "função",
      "observations": [
        "Função responsável por criar novas instâncias do Handler da API",
        "Recebe como parâmetros um cliente GitHub, repositório de documentos, cliente de cache e o tamanho do pool de workers",
        "Inicializa uma nova estrutura Handler com os valores fornecidos",
        "Cria um KeyBuilder para o Handler usar na geração de chaves de cache",
        "Representa o ponto de entrada para interagir com a API de documentação",
        "Factory function que encapsula a criação e configuração do Handler",
        "Separa a criação do Handler da sua utilização pelo router",
        "Permite a injeção de dependências para facilitar testes",
        "Suporta a nova funcionalidade de cache Redis para melhorar performance",
        "Integra os novos componentes de cache com a API existente",
        "É o ponto principal de acesso às funcionalidades da API",
        "Tem um papel central na inicialização do servidor HTTP",
        "Parte importante do processo de inicialização da aplicação",
        "Desenhado para permitir adição futura de novas dependências",
        "Mantém o código principal simples e focado em roteamento HTTP",
        "Integra-se com o Gin para processamento de requisições",
        "Retorna códigos HTTP apropriados para diferentes situações de erro",
        "Em caso de sucesso, retorna os dados do repositório em formato JSON com status 200"
      ]
    },
    {
      "name": "api.Handler.GetRepositoryDocumentation",
      "entityType": "método",
      "observations": [
        "Método central da API que processa requisições para obter documentação de repositórios GitHub",
        "Extrai parâmetros da URL para identificar o owner e nome do repositório",
        "Implementa um sistema de cache em duas camadas para otimizar performance e uso de memória",
        "Primeiro verifica o cache de metadados antes de buscar conteúdos individuais",
        "Utiliza cache fragmentado por documento para evitar problemas com limites de tamanho no Redis",
        "Suporta recuperação parcial do cache quando apenas alguns documentos estão armazenados",
        "Verifica cache Redis antes de fazer chamadas à API do GitHub",
        "Utiliza KeyBuilder para gerar chaves de cache consistentes para metadados e conteúdo",
        "Armazena resultados no cache Redis em duas camadas para melhorar performance",
        "Indica na resposta quando os dados vieram do cache com o sufixo '(from cache)' ou '(from fragmented cache)'",
        "Valida parâmetros e retorna erros apropriados quando inválidos",
        "Utiliza o cliente GitHub para buscar apenas os documentos não presentes no cache",
        "Processa erros do GitHub API e retorna códigos HTTP adequados",
        "Armazena a documentação processada no MongoDB quando disponível",
        "Estrutura a resposta em formato padronizado para o cliente",
        "Utiliza o modelo RepositoryDocsResponse para encapsular a resposta com contagem de arquivos processados",
        "Reduz significativamente o tempo de resposta para requisições repetidas (4-5x mais rápido)"
      ]
    },
    {
      "name": "cache.Cache",
      "entityType": "interface",
      "observations": [
        "Interface para abstração de mecanismos de cache",
        "Define métodos para armazenar, recuperar e invalidar itens no cache",
        "Implementada por diferentes providers como MemoryCache e RedisCache",
        "Utilizada para melhorar performance evitando chamadas repetidas à API do GitHub",
        "Suporta configuração de TTL para controlar a validade dos itens armazenados",
        "Define métodos como Get(key string) e Set(key string, value interface{}, ttl time.Duration)",
        "A integração do cache é crucial para a performance, podendo reduzir significativamente o tempo de resposta",
        "A chave de cache geralmente inclui o nome do repositório, owner e branch",
        "Localizada em internal/cache/cache.go com definição da interface e utilitários de construção de chaves",
        "Oferece fallback gracioso: se o cache estiver indisponível, o sistema retorna às chamadas diretas de API"
      ]
    },
    {
      "name": "github.Client",
      "entityType": "estrutura",
      "observations": [
        "Componente fundamental que implementa toda a comunicação com a API do GitHub",
        "Encapsula o cliente oficial do GitHub com funcionalidades adicionais específicas para o projeto",
        "Implementa controle de timeout para as requisições",
        "Fornece métodos para buscar repositórios, documentação e realizar buscas",
        "Implementa processamento paralelo para extração de documentação usando worker pools",
        "Realiza busca inteligente de arquivos de documentação, como arquivos markdown em diretórios específicos",
        "Trata erros da API do GitHub de forma centralizada, convertendo-os em mensagens mais amigáveis",
        "Implementa mecanismos para lidar com limites de taxa (rate limits) da API do GitHub"
      ]
    },
    {
      "name": "github.Client.GetRepositoryDocumentation",
      "entityType": "método",
      "observations": [
        "Método central que implementa a extração concorrente de documentação de repositórios GitHub",
        "Utiliza worker pools para processamento paralelo, com limite de concorrência configurável",
        "Implementa uma estratégia inteligente de busca: primeiro verifica o diretório /docs, depois faz busca geral se necessário",
        "Manipula contexto cancelável para interromper operações quando o cliente desconecta",
        "Implementa retry com backoff para lidar com rate limits da API do GitHub",
        "Processa arquivos markdown e outros documentos comuns como README, CONTRIBUTING, etc.",
        "Utiliza métodos auxiliares como findDocumentation, getFileContent e isDocumentationFile",
        "Devolve uma lista de objetos Documentation com metadados e conteúdo dos arquivos processados"
      ]
    },
    {
      "name": "models.Repository",
      "entityType": "estrutura",
      "observations": [
        "Modelo que representa um repositório do GitHub",
        "Contém atributos como ID, Nome, Nome Completo, Descrição e informações de versão",
        "Armazena estatísticas como estrelas, forks, linguagem principal e tópicos",
        "Inclui metadados como ramo padrão, datas de criação e atualização",
        "Estruturado com tags JSON para serialização/desserialização adequada na API",
        "Utilizado como parte da resposta para endpoints da API",
        "Define campos opcionais como DocumentationURL para casos específicos"
      ]
    },
    {
      "name": "models.Documentation",
      "entityType": "estrutura",
      "observations": [
        "Modelo central que representa um arquivo de documentação extraído de um repositório GitHub",
        "Armazena informações sobre o repositório como ID e nome para rastreabilidade",
        "Mantém o caminho (path) do arquivo no repositório para referência",
        "Contém o conteúdo completo do arquivo de documentação e seu tipo (geralmente markdown)",
        "Armazena metadados como tamanho, SHA (hash) e URL de acesso ao arquivo original",
        "Utilizado como parte da resposta para o endpoint principal de extração de documentação",
        "Estruturado com tags JSON para serialização/desserialização na API REST"
      ]
    },
    {
      "name": "models.RepositoryDocsResponse",
      "entityType": "estrutura",
      "observations": [
        "Estrutura especializada para a resposta do endpoint principal de extração de documentação",
        "Agrega todos os itens de documentação encontrados em um repositório",
        "Inclui metadados como status HTTP e mensagem informativa sobre o resultado da operação",
        "Armazena informações sobre o repositório (proprietário e nome) para contexto",
        "Fornece uma contagem dos arquivos de documentação processados",
        "Utiliza um array de objetos Documentation para entregar o conteúdo completo",
        "Retornada pelo método GetRepositoryDocumentation do Handler da API",
        "Estruturada com tags JSON para serialização adequada na resposta HTTP"
      ]
    },
    {
      "name": "api.SetupRouter",
      "entityType": "função",
      "observations": [
        "Função responsável por configurar todas as rotas da API do projeto",
        "Configura middlewares para CORS e timeout de requisições",
        "Define o endpoint de health check para monitoramento da API",
        "Estrutura as rotas da API com prefixo /api/v1 seguindo boas práticas REST",
        "Mapeia os endpoints para os métodos apropriados do Handler",
        "Configura endpoints para obtenção de repositórios, documentação e busca",
        "Inclui endpoints especializados para obter documentação diretamente de URLs",
        "Retorna o router configurado para ser utilizado pelo servidor HTTP"
      ]
    },
    {
      "name": "api.corsMiddleware",
      "entityType": "função",
      "observations": [
        "Middleware responsável por gerenciar cabeçalhos CORS (Cross-Origin Resource Sharing)",
        "Permite requisições de diferentes origens, necessário para APIs consumidas por frontends em domínios diferentes",
        "Configura cabeçalhos Access-Control-Allow-Origin, Methods e Headers",
        "Gerencia requisições OPTIONS usadas para preflight de CORS",
        "Retorna um HTTP 204 (No Content) para requisições OPTIONS",
        "Implementado como uma factory que retorna uma HandlerFunc do Gin",
        "Um componente essencial de segurança para APIs web modernas"
      ]
    },
    {
      "name": "api.timeoutMiddleware",
      "entityType": "função",
      "observations": [
        "Middleware responsável por adicionar timeout às requisições HTTP",
        "Previne que requisições fiquem pendentes indefinidamente, melhorando a resiliência da API",
        "Utiliza context.WithTimeout para criar um contexto com tempo limite",
        "Ignora requisições de streaming (text/event-stream) onde timeouts são inadequados",
        "Configurado com duração padrão de um minuto no SetupRouter",
        "Implementado como uma factory que aceita a duração do timeout como parâmetro",
        "Componente crucial para garantir performance e evitar acumulação de conexões pendentes"
      ]
    },
    {
      "name": "database.DocStorage",
      "entityType": "estrutura",
      "observations": [
        "Versão leve da Documentation para armazenamento otimizado no MongoDB",
        "Contém campos como RepoID, RepoName, Filename, ProcessedPath, ContentType, Size, SnippetsCount, Content",
        "Armazena o conteúdo da documentação em formato TXT para economizar espaço",
        "Inclui timestamp de criação e atualização para rastreabilidade",
        "Implementado para tornar a armazenamento mais eficiente para planos gratuitos do MongoDB"
      ]
    },
    {
      "name": "database.Client",
      "entityType": "classe",
      "observations": [
        "Cliente para operações MongoDB no projeto go-mcpdocs",
        "Gerencia conexão, operações CRUD e timeout para o banco de dados",
        "Utiliza o driver oficial MongoDB para Go",
        "Mantém referências para database e collections específicas",
        "Implementa métodos especializados para armazenamento e recuperação de documentação"
      ]
    },
    {
      "name": "database.Client.StoreProcessedDocumentation",
      "entityType": "método",
      "observations": [
        "Armazena documentação processada no formato TXT no MongoDB",
        "Recebe parâmetros owner, repo, filename, content e snippetsCount",
        "Cria um caminho processado no formato /owner/repo/filename",
        "Armazena metadados importantes como tamanho e contagem de snippets",
        "Substitui o método StoreDocumentation anterior, oferecendo melhor eficiência"
      ]
    },
    {
      "name": "processor.TextFormatter",
      "entityType": "classe",
      "observations": [
        "Responsável por formatar snippets de código no formato TXT desejado",
        "Implementa métodos para converter conteúdo bruto em formato estruturado",
        "Gera cabeçalhos com TITLE, DESCRIPTION, SOURCE e CODE para cada snippet",
        "Formata URLs de source para um formato mais limpo e legível",
        "Cria separadores entre snippets para melhor legibilidade"
      ]
    },
    {
      "name": "processor.TextFormatter.ProcessAndFormatDocumentation",
      "entityType": "método",
      "observations": [
        "Processa e formata a documentação bruta em formato TXT estruturado",
        "Filtra documentos relevantes e extrai snippets de código",
        "Simplifica URLs de SOURCE para o formato /owner/repo/path",
        "Gera um nome de arquivo baseado no repositório",
        "Retorna o nome do arquivo, o texto formatado e a contagem de snippets"
      ]
    },
    {
      "name": "repository.DocumentRepository",
      "entityType": "classe",
      "observations": [
        "Repositório que gerencia operações de armazenamento e recuperação de documentos",
        "Faz a ponte entre a API e o banco de dados MongoDB",
        "Utiliza o TextFormatter para processar documentação antes de armazenar",
        "Implementa verificação de habilitação do MongoDB (enabled flag)",
        "Oferece métodos para armazenar e recuperar documentação processada"
      ]
    },
    {
      "name": "repository.DocumentRepository.StoreDocumentation",
      "entityType": "método",
      "observations": [
        "Processa e armazena documentação no formato TXT no MongoDB",
        "Extrai owner/repo do nome do documento",
        "Utiliza o TextFormatter para processar e formatar a documentação",
        "Verifica se existem snippets antes de armazenar",
        "Usa o cliente MongoDB para persistir os dados processados"
      ]
    },
    {
      "name": "github.Client.listDocFilesInPath",
      "entityType": "método",
      "observations": [
        "Lista recursivamente todos os arquivos markdown em um caminho específico",
        "Substitui o método listDocsDirectoryFiles, tornando-o mais flexível",
        "Permite listar arquivos em qualquer caminho de documentação (docs/, src/content, etc.)",
        "Filtra apenas arquivos markdown e documentação relevantes",
        "Implementado para suportar diferentes estruturas de repositório"
      ]
    },
    {
      "name": "github.Client.listFilesRecursively",
      "entityType": "método",
      "observations": [
        "Busca recursivamente todos os arquivos em um diretório e seus subdiretórios",
        "Método auxiliar usado por listDocFilesInPath",
        "Navega pela estrutura de diretórios do GitHub de forma recursiva",
        "Acumula os caminhos de arquivo encontrados em um slice",
        "Continua a busca mesmo após erros em subdiretórios para maximizar a coleta"
      ]
    },
    {
      "name": "models.DocumentMetadata",
      "entityType": "estrutura",
      "observations": [
        "Estrutura leve para armazenar metadados de documentos no cache",
        "Parte do sistema de cache em duas camadas para otimização de performance",
        "Contém apenas Path, Size, SHA e CreatedAt para minimizar uso de memória",
        "Facilita a verificação rápida de cache sem carregar conteúdos completos",
        "Usada para construir o índice de documentação no cache de metadados"
      ]
    },
    {
      "name": "models.RepositoryDocumentationIndex",
      "entityType": "estrutura",
      "observations": [
        "Modelo central do sistema de cache em duas camadas",
        "Armazena metadados leves sobre todos os documentos de um repositório",
        "Contém informações sobre owner, repo, ref (tag/branch), contagem e timestamp",
        "Mantém lista de objetos DocumentMetadata para rápida verificação de cache",
        "Permite validação de disponibilidade sem carregar conteúdos completos",
        "Resolve problemas de tamanho de cache para repositórios grandes",
        "Facilita atualizações incrementais quando apenas alguns documentos mudam"
      ]
    },
    {
      "name": "cache.KeyBuilder.RepositoryDocumentationMetadataKey",
      "entityType": "método",
      "observations": [
        "Gera chave única para o índice de metadados de documentação de um repositório",
        "Parte do sistema de cache em duas camadas para documentação",
        "Formato de chave: {prefixo}:doc_metadata:{owner}:{repo}:{ref}",
        "Suporta versionamento baseado na tag/branch (ref) do repositório",
        "Utilizado antes de buscar os conteúdos individuais para otimizar desempenho"
      ]
    },
    {
      "name": "cache.KeyBuilder.DocumentContentKey",
      "entityType": "método",
      "observations": [
        "Gera chave única para o conteúdo individual de um documento",
        "Parte do sistema de cache fragmentado para documentação",
        "Formato de chave: {prefixo}:doc_content:{owner}:{repo}:{ref}:{path_hash}",
        "Permite recuperação individualizada de documentos do cache",
        "Resolve problemas com limites de tamanho no Redis para repositórios grandes",
        "Facilita atualizações incrementais quando apenas alguns documentos mudam"
      ]
    }
  ],
  "relations": [
    {
      "from": "api.Handler.GetRepositoryDocumentation",
      "relationType": "implementa",
      "to": "GET /repository/:owner/:repo/docs"
    },
    {
      "from": "api.Handler.GetRepository",
      "relationType": "implementa",
      "to": "GET /repository/:owner/:repo"
    },
    {
      "from": "api.Handler.SearchRepositories",
      "relationType": "implementa",
      "to": "GET /search/repositories"
    },
    {
      "from": "api.Handler.HealthCheck",
      "relationType": "implementa",
      "to": "GET /health"
    },
    {
      "from": "api.Handler.GetRepositoryDocumentation",
      "relationType": "utiliza",
      "to": "models.RepositoryDocumentationIndex"
    },
    {
      "from": "api.Handler.GetRepositoryDocumentation",
      "relationType": "utiliza",
      "to": "models.DocumentMetadata"
    },
    {
      "from": "api.Handler.GetRepositoryDocumentation",
      "relationType": "utiliza",
      "to": "cache.KeyBuilder.RepositoryDocumentationMetadataKey"
    },
    {
      "from": "api.Handler.GetRepositoryDocumentation",
      "relationType": "utiliza",
      "to": "cache.KeyBuilder.DocumentContentKey"
    },
    {
      "from": "models.RepositoryDocumentationIndex",
      "relationType": "contém",
      "to": "models.DocumentMetadata"
    },
    {
      "from": "cache.RedisClient",
      "relationType": "implementa",
      "to": "cache.Cache"
    },
    {
      "from": "api.Handler",
      "relationType": "utiliza",
      "to": "cache.Cache"
    },
    {
      "from": "api.Handler",
      "relationType": "utiliza",
      "to": "cache.KeyBuilder"
    },
    {
      "from": "api.Handler.GetRepositoryDocumentation",
      "relationType": "utiliza",
      "to": "cache.Cache"
    },
    {
      "from": "api.Handler.GetRepository",
      "relationType": "utiliza",
      "to": "cache.Cache"
    },
    {
      "from": "main.main",
      "relationType": "inicializa",
      "to": "cache.RedisClient"
    },
    {
      "from": "config.Config",
      "relationType": "configura",
      "to": "cache.RedisClient"
    },
    {
      "from": "cache.redis_test.go",
      "relationType": "testa",
      "to": "cache.RedisClient"
    },
    {
      "from": "config.Config",
      "relationType": "configura",
      "to": "go-mcpdocsProject"
    },
    {
      "from": "config.Load",
      "relationType": "cria",
      "to": "config.Config"
    },
    {
      "from": "api.Handler",
      "relationType": "implementa",
      "to": "go-mcpdocsProject"
    },
    {
      "from": "api.Handler",
      "relationType": "utiliza",
      "to": "config.Config"
    },
    {
      "from": "api.NewHandler",
      "relationType": "cria",
      "to": "api.Handler"
    },
    {
      "from": "api.Handler.GetRepository",
      "relationType": "pertence_a",
      "to": "api.Handler"
    },
    {
      "from": "api.Handler.GetRepository",
      "relationType": "utiliza",
      "to": "github.Client"
    },
    {
      "from": "api.Handler.GetRepositoryDocumentation",
      "relationType": "pertence_a",
      "to": "api.Handler"
    },
    {
      "from": "api.Handler.GetRepositoryDocumentation",
      "relationType": "utiliza",
      "to": "github.Client"
    },
    {
      "from": "api.Handler.GetRepositoryDocumentation",
      "relationType": "implementa_funcionalidade_principal",
      "to": "go-mcpdocsProject"
    },
    {
      "from": "api.Handler.SearchRepositories",
      "relationType": "pertence_a",
      "to": "api.Handler"
    },
    {
      "from": "api.Handler.SearchRepositories",
      "relationType": "utiliza",
      "to": "github.Client"
    },
    {
      "from": "api.Handler.SearchRepositories",
      "relationType": "suporta",
      "to": "go-mcpdocsProject"
    },
    {
      "from": "github.Client",
      "relationType": "implementa_acesso_externo",
      "to": "go-mcpdocsProject"
    },
    {
      "from": "api.Handler",
      "relationType": "dependência",
      "to": "github.Client"
    },
    {
      "from": "github.Client",
      "relationType": "converte_dados",
      "to": "models.Repository"
    },
    {
      "from": "github.Client",
      "relationType": "converte_dados",
      "to": "models.Documentation"
    },
    {
      "from": "github.Client.GetRepositoryDocumentation",
      "relationType": "pertence_a",
      "to": "github.Client"
    },
    {
      "from": "github.Client.GetRepositoryDocumentation",
      "relationType": "implementa_funcionalidade_core",
      "to": "go-mcpdocsProject"
    },
    {
      "from": "api.Handler.GetRepositoryDocumentation",
      "relationType": "depende_de",
      "to": "github.Client.GetRepositoryDocumentation"
    },
    {
      "from": "github.Client",
      "relationType": "usa",
      "to": "models.Repository"
    },
    {
      "from": "api.Handler",
      "relationType": "retorna",
      "to": "models.Repository"
    },
    {
      "from": "github.Client.GetRepositoryDocumentation",
      "relationType": "gera",
      "to": "models.Documentation"
    },
    {
      "from": "api.Handler.GetRepositoryDocumentation",
      "relationType": "retorna",
      "to": "models.Documentation"
    },
    {
      "from": "models.Documentation",
      "relationType": "componente_de",
      "to": "models.RepositoryDocsResponse"
    },
    {
      "from": "models.RepositoryDocsResponse",
      "relationType": "resposta_de",
      "to": "api.Handler.GetRepositoryDocumentation"
    },
    {
      "from": "models.RepositoryDocsResponse",
      "relationType": "estrutura_primaria",
      "to": "go-mcpdocsProject"
    },
    {
      "from": "api.SetupRouter",
      "relationType": "configura",
      "to": "go-mcpdocsProject"
    },
    {
      "from": "api.SetupRouter",
      "relationType": "utiliza",
      "to": "api.Handler"
    },
    {
      "from": "api.SetupRouter",
      "relationType": "utiliza",
      "to": "api.corsMiddleware"
    },
    {
      "from": "api.SetupRouter",
      "relationType": "utiliza",
      "to": "api.timeoutMiddleware"
    },
    {
      "from": "api.corsMiddleware",
      "relationType": "protege",
      "to": "go-mcpdocsProject"
    },
    {
      "from": "api.timeoutMiddleware",
      "relationType": "protege",
      "to": "go-mcpdocsProject"
    },
    {
      "from": "main.main",
      "relationType": "inicia",
      "to": "go-mcpdocsProject"
    },
    {
      "from": "main.main",
      "relationType": "configura",
      "to": "api.SetupRouter"
    },
    {
      "from": "go-mcpdocsNextSteps2025",
      "relationType": "is next steps plan for",
      "to": "go-mcpdocsProject"
    },
    {
      "from": "aonde-estamos.md",
      "relationType": "documents status of",
      "to": "go-mcpdocsProject"
    },
    {
      "from": "aonde-estamos.md",
      "relationType": "summarizes",
      "to": "go-mcpdocsNextSteps2025"
    },
    {
      "from": "aonde-estamos.md",
      "relationType": "is updated from",
      "to": "go-mcpdocsProject"
    },
    {
      "from": "api.Handler.GetRepositoryDocumentation",
      "relationType": "utiliza",
      "to": "repository.DocumentRepository"
    },
    {
      "from": "api.Handler.GetRepository",
      "relationType": "utiliza",
      "to": "repository.DocumentRepository"
    },
    {
      "from": "repository.DocumentRepository",
      "relationType": "depende_de",
      "to": "database.Client"
    },
    {
      "from": "repository.DocumentRepository",
      "relationType": "utiliza",
      "to": "processor.TextFormatter"
    },
    {
      "from": "database.Client",
      "relationType": "armazena",
      "to": "database.DocStorage"
    },
    {
      "from": "github.Client.GetRepositoryDocumentation",
      "relationType": "chama",
      "to": "github.Client.listDocFilesInPath"
    },
    {
      "from": "repository.DocumentRepository.StoreDocumentation",
      "relationType": "chama",
      "to": "database.Client.StoreProcessedDocumentation"
    },
    {
      "from": "processor.TextFormatter.ProcessAndFormatDocumentation",
      "relationType": "gera",
      "to": "database.DocStorage"
    },
    {
      "from": "github.Client.listDocFilesInPath",
      "relationType": "chama",
      "to": "github.Client.listFilesRecursively"
    },
    {
      "from": "api.Handler.GetRepositoryDocumentation",
      "relationType": "utiliza",
      "to": "cache.RedisCache"
    },
    {
      "from": "api.Handler.GetRepository",
      "relationType": "utiliza",
      "to": "cache.RedisCache"
    },
    {
      "from": "api.Handler.SearchRepositories",
      "relationType": "utiliza",
      "to": "cache.RedisCache"
    }
  ],
  "endpoints": [
    {
      "name": "GET /version",
      "description": "Retorna informações sobre a versão da API",
      "parameters": [],
      "responseModel": "models.VersionResponse"
    },
    {
      "name": "GET /repository/:owner/:repo/docs",
      "description": "Recupera os arquivos de documentação processados de um repositório específico do GitHub",
      "parameters": [
        {"name": "owner", "type": "string", "required": true, "description": "O nome do proprietário do repositório"},
        {"name": "repo", "type": "string", "required": true, "description": "O nome do repositório"},
        {"name": "branch", "type": "string", "required": false, "description": "O nome do branch específico (opcional)"}  
      ],
      "responseModel": "models.RepositoryDocsResponse"
    },
    {
      "name": "GET /repository/:owner/:repo",
      "description": "Recupera informações básicas sobre um repositório do GitHub",
      "parameters": [
        {"name": "owner", "type": "string", "required": true, "description": "O nome do proprietário do repositório"},
        {"name": "repo", "type": "string", "required": true, "description": "O nome do repositório"}
      ],
      "responseModel": "models.Repository"
    },
    {
      "name": "GET /search/repositories",
      "description": "Busca repositórios no GitHub com base em uma query",
      "parameters": [
        {"name": "query", "type": "string", "required": true, "description": "O termo de busca para os repositórios"},
        {"name": "page", "type": "integer", "required": false, "description": "O número da página dos resultados"},
        {"name": "per_page", "type": "integer", "required": false, "description": "O número de resultados por página"}
      ],
      "responseModel": "models.SearchResponse"
    },
    {
      "name": "GET /health",
      "description": "Verifica o status da aplicação",
      "parameters": [],
      "responseModel": "models.HealthResponse"
    }
  ],
  "schemaVersion": "2.0",
  "lastUpdated": "2025-05-09",
  "cacheImplementation": {
    "name": "Upstash Redis Cache",
    "description": "Implementação de cache Redis usando Upstash como serviço",
    "configVars": [
      {"name": "REDIS_URI", "description": "Connection string for Upstash Redis", "format": "rediss://default:<PASSWORD>@<HOSTNAME>.upstash.io:6379"},
      {"name": "CACHE_TTL", "description": "Default time-to-live for cached items", "format": "Go duration format (e.g., 1h, 30m)"}
    ],
    "cacheKeyPatterns": [
      {"pattern": "mcpdocs:repo:<owner>:<repo>", "purpose": "Repository metadata"},
      {"pattern": "mcpdocs:docs:<owner>:<repo>", "purpose": "Repository documentation"},
      {"pattern": "mcpdocs:search:<query>:<page>:<perPage>", "purpose": "Search results"}
    ],
    "integrationPoints": [
      "api.Handler.GetRepository",
      "api.Handler.GetRepositoryDocumentation",
      "api.Handler.SearchRepositories"
    ]
  }
}
